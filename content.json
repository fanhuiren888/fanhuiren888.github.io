{"meta":{"title":"Fanhr","subtitle":null,"description":null,"author":"Fanhr","url":"https://fanhuiren888.github.io"},"pages":[{"title":"Tagscloud","date":"2018-04-16T12:41:23.000Z","updated":"2018-04-16T12:58:36.618Z","comments":true,"path":"tags/index.html","permalink":"https://fanhuiren888.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"腾讯大王卡注销","slug":"腾讯大王卡注销","date":"2018-05-09T02:11:42.000Z","updated":"2018-05-09T03:22:36.815Z","comments":true,"path":"2018/05/09/腾讯大王卡注销/","link":"","permalink":"https://fanhuiren888.github.io/2018/05/09/腾讯大王卡注销/","excerpt":"","text":"背景介绍2017 年 10 月左右，由于联通老用户不可以转互联网套餐，本人对流量需求比较大，所以就申请了一张腾讯的大王卡，当时也没怎么在意就顺手选了杭州归属地。在 2018 年 4 月底我把以前已有的联通卡也转腾讯王卡的套餐了，就想把杭州归属地的大王卡注销掉，目前账户剩余 100+ 话费。 销户过程先拨打杭州联通客户 057110010 找人工客服，向客服表述我想注销杭州归属地大王卡，客服告知需要本人携带身份证到归属地所在营业厅办理，异地不能办理销户业务。由于我不方便去杭州所以就先结束通话。 网上搜索一番其他用户注销王卡经历，有人提到可以投诉试一下。但是要注意顺序 先拨打归属地联通进行投诉 –&gt; 再拨打集团投诉 –&gt; 最后是工信部投诉。 拨打杭州联通客服投诉，向客服表述我想注销杭州归属地大王卡, 客服告知会记录，24 小时会有回复。下午就来电话了说可以把资料（身份证（正反面）、本人手持身份证上半身照片、委托书一份）发送到他们的邮箱，他们代办。注意：委托书中提到剩余费用会作废。 他们的解释是只能代办业务，费用结转也只限杭州联通。至此我还是先把话费用完再注销吧。","categories":[],"tags":[{"name":"经验分享","slug":"经验分享","permalink":"https://fanhuiren888.github.io/tags/经验分享/"}]},{"title":"Linux笔记(一)","slug":"Linux笔记-一","date":"2018-04-17T06:17:53.000Z","updated":"2018-04-17T06:56:38.807Z","comments":true,"path":"2018/04/17/Linux笔记-一/","link":"","permalink":"https://fanhuiren888.github.io/2018/04/17/Linux笔记-一/","excerpt":"","text":"1.用户模版使用场景： 员工新入职，下发资料 操作步骤： 1.先进入到 /etc/skel/ 目录，将需要下发的文件放在此目录； .新建用户，然后 到用户家目录就可以看到； eg.123456789101112[root@baidu ~]# cd /etc/skel #进入到用户模版的目录[root@baidu skel]# ls -a. .. .bash_logout .bash_profile .bashrc .gnome2 .mozilla[root@baidu skel]# touch ygsc #放入你要下发的资料，这里创建了一个用户手册[root@baidu skel]# useradd bat #添加用户[root@baidu skel]# cd /home [root@baidu home]# ls bat lost+found[root@baidu home]# cd bat #进入到用户家目录[root@baidu bat]# ls #查看 显示用户手册文件ygsc[root@baidu bat]# 2.用户相关命令useradd 【-可选参数】 用户名 常用参数： u 指定uid d 指定用户家目录 m 如果存在不再创建，但是此目录并不属于新创建用户；如果主目录不存在，则强制创建； 建议 -m 和 -d 一块使用。 g 起始组 #只能有一个 G 附加组 #可以有多个 s 指定 shell userdel 【-可选参数】 用户名 userdel 只删除用户，家目录依然存在 r 递归删除（删除用户下所有数据） usermod 【-可选参数】 用户名 常用参数： u uid d 家目录 g 起始组 #只能有一个 G 附加组 #可以有多个 s 指定shell 3.特殊权限 这里写图片描述 SUID：（主要用在命令上） 限定：只能设置在二进制可执行程序上面，对目录设置无效功能：程序运行时的权限从执行者变更成程序所有者 eg.12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758[root@baidu ~]# su - bat #进入 bat 用户[bat@baidu ~]$ ll /etc/shadow #查看 /etc/shadow 文件 ----------. 1 root root 1022 2月 12 00:32 /etc/shadow[bat@baidu ~]$ cat /etc/shadowcat: /etc/shadow: 权限不够 #提示权限不够 [bat@baidu ~]$ exitlogout[root@baidu ~]# which cat #查找 cat 命令的路径/bin/cat[root@baidu ~]# chmod u+s /bin/cat #给 cat 命令添加一个 S 的权限[root@baidu ~]# ll /bin/cat-rwsr-xr-x. 1 root root 47976 11月 22 2013 /bin/cat[root@baidu ~]# su - bat #再进入到 bat 用户[bat@baidu ~]$ cat /etc/shadow #执行查看命令 查看成功！root:$6$46tnMw26$7ptT4eLjKVzKNczsRHaERhdYBF/XIYn/djeXMATLO3QeajVJtz0Xwtu/fY0Y2PndYDgig3kzqAwsWrEyhIg78/:17573:0:99999:7:::bin:*:15980:0:99999:7:::daemon:*:15980:0:99999:7:::adm:*:15980:0:99999:7:::lp:*:15980:0:99999:7:::sync:*:15980:0:99999:7:::shutdown:*:15980:0:99999:7:::halt:*:15980:0:99999:7:::mail:*:15980:0:99999:7:::uucp:*:15980:0:99999:7:::operator:*:15980:0:99999:7:::games:*:15980:0:99999:7:::gopher:*:15980:0:99999:7:::ftp:*:15980:0:99999:7:::nobody:*:15980:0:99999:7:::dbus:!!:17561::::::usbmuxd:!!:17561::::::vcsa:!!:17561::::::rpc:!!:17561:0:99999:7:::rtkit:!!:17561::::::avahi-autoipd:!!:17561::::::pulse:!!:17561::::::haldaemon:!!:17561::::::ntp:!!:17561::::::apache:!!:17561::::::saslauth:!!:17561::::::postfix:!!:17561::::::abrt:!!:17561::::::rpcuser:!!:17561::::::nfsnobody:!!:17561::::::gdm:!!:17561::::::sshd:!!:17561::::::tcpdump:!!:17561::::::bat:$6$Jbo0cpgM$lXDyuLHjp8J6vqyNjtgfwWcpF9Ga26pZ3cPN1feMeGZNoxQlIO6bdzZyIRarW4RPqIBhM29LZ1qF0A76D2lC21:17573:0:99999:7:::[bat@baidu ~]$ exitlogout[root@baidu ~]# chmod u-s /bin/cat #切换到 root 用户取消 S 权限[root@baidu ~]# ll !$ll /bin/cat-rwxr-xr-x. 1 root root 47976 11月 22 2013 /bin/cat[root@baidu ~]# su - bat #再切回 bat 用户[bat@baidu ~]$ cat /etc/shadow #再次查看，取消 S 权限的用户又查看不了了cat: /etc/shadow: 权限不够[root@baidu ~]# SGID：（主要用在目录上,对目录和组都有权限） 限定：既可以给二进制可执行程序设置，也可以对目录设置功能：在设置了SGID权限的目录下建立文件时，新创建的文件的所属组会 eg.12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364[root@baidu ~]# mkdir /test #创建一个根下的 test 目录[root@baidu ~]# groupadd bbt #新建一个用户组[root@baidu ~]# useradd -G bbt b1 #新建用户 b1 指定 bbt 组[root@baidu ~]# useradd -G bbt b2 #新建用户 b2 指定 bbt 组[root@baidu ~]# id b1 #查看 b1 的属组uid=501(b1) gid=502(b1) 组=502(b1),501(bbt)[root@baidu ~]# id b2 #查看 b2 的属组uid=502(b2) gid=503(b2) 组=503(b2),501(bbt)[root@baidu ~]# ll -d /test #查看 test 目录的属组drwxr-xr-x. 2 root root 4096 2月 12 00:45 /test[root@baidu ~]# chown :bbt /test #修改 test 目录的属组为 bbt[root@baidu ~]# !ll # ！ll 代表执行上一条 ll 命令ll -d /testdrwxr-xr-x. 2 root bbt 4096 2月 12 00:45 /test #修改成功[root@baidu ~]# chmod 775 /test #修改 test 目录的权限为775[root@baidu ~]# ll -d /test drwxrwxr-x. 2 root bbt 4096 2月 12 00:45 /test[root@baidu ~]# chmod g+s /test #给 test 目录添加 S 权限[root@baidu ~]# ll -d /test #查看结果 修改成功drwxrwsr-x. 2 root bbt 4096 2月 12 00:45 /test[root@baidu ~]# su - b1 #切到 b1 用户[b1@baidu ~]$ pwd/home/b1[b1@baidu ~]$ cd /test #进入 test 目录[b1@baidu test]$ touch aa #创建 aa 文件[b1@baidu test]$ touch bb #创建 bb 文件[b1@baidu test]$ ll总用量 0-rw-rw-r--. 1 b1 bbt 0 2月 12 00:50 aa-rw-rw-r--. 1 b1 bbt 0 2月 12 00:50 bb[b1@baidu test]$ exitlogout[root@baidu ~]# su - b2 #切换 b2 用户 [b2@baidu ~]$ cd /test #进入 test 目录[b2@baidu test]$ ll总用量 0-rw-rw-r--. 1 b1 bbt 0 2月 12 00:50 aa -rw-rw-r--. 1 b1 bbt 0 2月 12 00:50 bb[b2@baidu test]$ touch dd #创建 dd 文件 [b2@baidu test]$ touch cc #创建 cc 文件[b2@baidu test]$ ll #可以看到只要用户是在 test 目录创建的文件都属于 bbt 组总用量 0-rw-rw-r--. 1 b1 bbt 0 2月 12 00:50 aa-rw-rw-r--. 1 b1 bbt 0 2月 12 00:51 bb-rw-rw-r--. 1 b2 bbt 0 2月 12 00:51 cc-rw-rw-r--. 1 b2 bbt 0 2月 12 00:51 dd[b2@baidu test]$ exitlogout[root@baidu ~]# su - b1 #再切回 b1 进入家目录[b1@baidu ~]$ pwd/home/b1[b1@baidu ~]$ touch aa #创建 aa 文件[b1@baidu ~]$ ll #可以看到 aa 属于 b1 组总用量 0-rw-rw-r--. 1 b1 b1 0 2月 12 00:53 aa-rw-r--r--. 1 b1 b1 0 2月 11 23:44 ygsc[b1@baidu ~]$ cd /test[b1@baidu test]$ ll总用量 0-rw-rw-r--. 1 b1 bbt 0 2月 12 00:50 aa-rw-rw-r--. 1 b1 bbt 0 2月 12 00:51 bb-rw-rw-r--. 1 b2 bbt 0 2月 12 00:51 cc-rw-rw-r--. 1 b2 bbt 0 2月 12 00:51 dd[b1@baidu test]$ 4.文件的归档（解压与压缩）tar 【- 可选参数】 文件名 || 目录名 （可写多个） du -sh + 文件名 （查看文件大小） .gz 压缩： tar zcvf filename.tar.gz filename 解压缩： tar zxvf filename.tar.gz .bz2 压缩： tar jcvf filename.tar.bz2 filename 解压缩： tar jxvf filename.tar.bz2 其他格式语法： .gz 压缩 gzip + 文件名 解压 gunzip + 文件名 bz2 压缩 bzip2 + 文件名（压缩后文件会删掉） 解压 bunzip2 -kd + 文件名 bzip2 -K + 文件名（-K 大写，压缩后会保留文件） xz 压缩 xz -k + 文件名 解压 xz -d + 文件名 zip 压缩 zip -k + 文件名 解压 zip -d + 文件名 常用参数： c, 创建一个新归档 x, 从归档中解出文件 v, 详细过程 f, 指定备份文件 t, 列出备份文件 C, 指定解压位置 P, 使用绝对路径的时候不移除 / （根号） 这里写图片描述 eg.123456789101112131415161718192021222324252627282930313233[root@baidu ~]# cd /tmp [root@baidu tmp]# mkdir test #进入 /tmp 目录 创建 test 目录[root@baidu tmp]# cd test/[root@baidu test]# touch a.txt b.txt #在 test 目录创建两个文件 a.txt b.txt [root@baidu test]# chmod o-r b.txt #取消 other 的读的权限[root@baidu test]# ll a.txt -rw-r--r--. 1 root root 0 2月 12 03:34 a.txt[root@baidu test]# ll b.txt -rw-r-----. 1 root root 0 2月 12 03:34 b.txt[root@baidu test]# su - bat #切换到 bat 普通用户[bat@baidu ~]$ cd /tmp/test/[bat@baidu test]$ ll总用量 0-rw-r--r--. 1 root root 0 2月 12 03:34 a.txt-rw-r-----. 1 root root 0 2月 12 03:34 b.txt[bat@baidu test]$ tar cf a.tar a.txt b.txt #打包 a.txt b.txt 文件，就会提示权限不够tar: a.tar：无法 open: 权限不够tar: Error is not recoverable: exiting now[bat@baidu test]$ exit #退回到 root 用户logout[root@baidu test]# lsa.txt b.txt[root@baidu test]# tar cf a.tar a.txt #执行打包操作[root@baidu test]# ls #查看会多一个 a.tar 的文件a.tar a.txt b.txt[root@baidu test]# rm -r a.txt #删掉 a.txt rm：是否删除普通空文件 &quot;a.txt&quot;？y[root@baidu test]# lsa.tar b.txt[root@baidu test]# tar xf a.tar #再解包[root@baidu test]# ls #查看 a.txt 又有了a.tar a.txt b.txt[root@baidu test]# 5.查找命令查找的命令： whereis 查看可执行文件安的位置及相关文件 locate 配合数据库缓存，快速查看文件位置 which 查看可执行文件的位置 grep 过滤，它是一个文本搜索工具 find find通过文件名称查找 find 【路径】 【-name】 【文件名 || 目录名】[-print]可省略 eg. (查找 root 目录下的 .txt 文件)1234[root@baidu ~]# find ./ -name &quot;*.txt&quot;./test/a.txt./test/b.txt[root@baidu ~]# 通过文件权限查找 find 【路径】 【-perm】 【文件名 || 目录名】[-print]可省略 eg. （查找 root 下 755 权限的文件，由于太多，只显示前 5 ）1234567[root@baidu ~]# find ~ -perm 755 |head -5/root/.cache/root/.cache/ibus/root/.cache/ibus/bus/root/.gnote/root/.gnote/addins[root@baidu ~]# 查找忽略部分路径目录或文件find 【路径】 【-path】 【文件名 || 目录名】【-prune】 [-print]可省略eg. 这里写图片描述 这里写图片描述 1234567[root@baidu apps]# find /apps -path &quot;/apps/bin&quot; -prune #显示 忽略 &quot;/apps/bin&quot; /apps/bin[root@baidu apps]# find /apps -path &quot;/apps/bin&quot; -prune -o -print #显示 忽略 &quot;/apps/bin&quot; 以外的文件/apps/apps/a/apps/b[root@baidu apps]# 查找文件并查看其属性find 【路径】 【-name】 【文件名 || 目录名】【-exec】 ls -l ｛｝\\;eg.12345678[root@baidu apps]# find /apps/ -name &quot;a*&quot; -exec ls -l &#123;&#125; \\;总用量 4-rw-r--r--. 1 root root 0 2月 12 19:55 a-rw-r--r--. 1 root root 0 2月 12 19:55 bdrwxr-xr-x. 2 root root 4096 2月 12 19:55 bin-rw-r--r--. 1 root root 0 2月 12 19:55 /apps/a-rw-r--r--. 1 root root 0 2月 12 19:55 /apps/bin/aa[root@baidu apps]# 这条组合命令的意思是 find 找到的内容放在大括号里，通过ls -l 查看； 这里写图片描述 按照更改时间或访问时间等查找文件 常用选项：mtime：文件最后一次修改时间atime：文件最后一次访问时间ctime：文件的最后一次变化时间，也是修改时间 find 【路径】 【-mtime】 【文件名 || 目录名】【时间区间】eg.查询 root 目录下 最后一次修改时间 5天以内的1234567891011121314[root@baidu test]# find ~ -mtime -5 #5天以内的用 -5 5天以前的用 +5/root/root/.imsettings.log/root/.gconfd/root/.gconfd/saved_state/root/.viminfo/root/test/root/test/grub2.tar/root/test/grub2-2.tar/root/test/a.txt/root/test/grub2-1.tar/root/test/b.txt/root/.bash_history[root@baidu test]# 按文件类型来查找 find 【路径】 【-type】 【d || r || l】 eg.12345678910111213141516171819[root@baidu test]# find /etc -type d |head -5 #查询 /etc 下的 目录 只显示前5个/etc/etc/statetab.d/etc/scl/etc/scl/prefixes/etc/latrace.d[root@baidu test]# find /etc -type f |head -5 #查询 /etc 下的 文件 只显示前5个/etc/mime.types/etc/latrace.d/syslog.conf/etc/latrace.d/pthread.conf/etc/latrace.d/wait.conf/etc/latrace.d/term.conf[root@baidu test]# find /etc -type l |head -5 #查询 /etc 下的 链接 只显示前5个/etc/rc.sysinit/etc/rc6.d/etc/rc2.d/etc/rc3.d/etc/rc.d/rc6.d/K87rpcbind[root@baidu test]# 通过文件大小查找 文件单位大小：b —–块（512字节）c —–字节w —–字（2字节）k —–千字节M —–兆字节G —–吉字节一个数据块=512字节=0.5KB1MB=1024KB=2048数据块 1234567891011121314[root@baidu test]# find /etc -size -1M |head -5 #查找 /etc 目录下 ＜ 1M 的文件/etc/ghostscript/8.70/Fontmap.local/etc/ghostscript/8.70/CIDFnmap.local/etc/ghostscript/8.70/cidfmap.local/etc/wvdial.conf/etc/cron.deny[root@baidu test]# [root@baidu test]# find /etc -size +20k -a -size -50k |head -5 #查询 /etc 下 20k &lt; 文件 &lt; 50k/etc/mime.types/etc/dnsmasq.conf/etc/lvm/lvm.conf/etc/libreport/events/report_RHTSupport.xml/etc/libreport/events/report_RHTSupportAttach.xml[root@baidu test]# grep常用参数： -v 取反 -i 忽略大小写 ^# 以#开头 #$ 以#结尾 ^$ 空行 -n 对过滤的内容加上行号 eg. 123456789101112131415161718192021222324[root@baidu ~]# grep root /etc/passwd #过滤 /etc/passwd 文件中的 rootroot:x:0:0:root:/root:/bin/bashoperator:x:11:0:operator:/root:/sbin/nologin[root@baidu ~]# grep -n root /etc/passwd #过滤 /etc/passwd 文件中的 root 并显示行号1:root:x:0:0:root:/root:/bin/bash11:operator:x:11:0:operator:/root:/sbin/nologin[root@baidu ~]# grep -i root /etc/passwd #过滤 /etc/passwd 文件中的 root -i 忽略大小写root:x:0:0:root:/root:/bin/bashoperator:x:11:0:operator:/root:/sbin/nologinROOT ROOT[root@baidu ~]# [root@baidu ~]# grep 1 a.txt #过滤 a.txt 中的 1111111[root@baidu ~]# grep -v 1 a.txt #过滤 a.txt 中的 1 -v 取反 222222223333333[root@baidu ~]# grep ^# /etc/passwd #过滤 /etc/passwd 文件中以 # 开头的内容#ROOT ROOT[root@baidu ~]# grep bash$ /etc/passwd #过滤 /etc/passwd 文件中以 bash 结尾的内容root:x:0:0:root:/root:/bin/bashbat:x:500:500::/home/bat:/bin/bashb1:x:501:502::/home/b1:/bin/bashb2:x:502:503::/home/b2:/bin/bash[root@baidu ~]# 6.软件包管理1.源码包2.二进制包3.rpm 包4.yum 包 rpm常用参数： -i install -v verbose -q query -a all -f file -p package rpm 包安装 rpm 【-ivh】 【包名】 eg.12345[root@root Packages]# rpm -ivh zlib-1.2.3-29.el6.i686.rpm warning: zlib-1.2.3-29.el6.i686.rpm: Header V3 RSA/SHA1 Signature, key ID c105b9de: NOKEYPreparing... ########################################### [100%] package zlib-1.2.3-29.el6.i686 is already installed[root@root Packages]# rpm 包查询 rpm 【-qa || qf || qpi】 【包名】 eg. 1234567891011121314151617181920212223[root@root Packages]# rpm -qa httpd httpd-2.2.15-29.el6.centos.i686[root@root Packages]# [root@root Packages]#[root@root Packages]#[root@root Packages]#[root@root Packages]#[root@root Packages]# rpm -qpi zlib-1.2.3-29.el6.i686.rpm warning: zlib-1.2.3-29.el6.i686.rpm: Header V3 RSA/SHA1 Signature, key ID c105b9de: NOKEYName : zlib Relocations: (not relocatable)Version : 1.2.3 Vendor: CentOSRelease : 29.el6 Build Date: 2013年02月22日 星期五 07时01分21秒Install Date: (not installed) Build Host: c6b9.bsys.dev.centos.orgGroup : System Environment/Libraries Source RPM: zlib-1.2.3-29.el6.src.rpmSize : 139089 License: zlib and BoostSignature : RSA/SHA1, 2013年02月24日 星期日 01时50分39秒, Key ID 0946fca2c105b9dePackager : CentOS BuildSystem &lt;http://bugs.centos.org&gt;URL : http://www.gzip.org/zlib/Summary : The zlib compression and decompression libraryDescription :Zlib is a general-purpose, patent-free, lossless data compressionlibrary which is used by many different programs.[root@root Packages]# yumyum 配置 12345678910111213141516[root@root conf]# cd /etc/yum.repos.d/[root@root yum.repos.d]# lscentos.repo[root@root yum.repos.d]# vim centos.repo [centos]name=centosbaseurl=file:///mnt #本地源，需要网络源直接换网址enable=1gpgcheck=0~~~~~~[root@root yum.repos.d]# yum 包安装 yum install 【包名】 eg. 1234567891011121314151617181920212223242526272829303132333435363738[root@root Packages]# yum install pcre-develLoaded plugins: fastestmirror, refresh-packagekit, securityLoading mirror speeds from cached hostfileSetting up Install ProcessResolving Dependencies--&gt; Running transaction check---&gt; Package pcre-devel.i686 0:7.8-6.el6 will be installed--&gt; Finished Dependency ResolutionDependencies Resolved================================================================================================================================================= Package Arch Version Repository Size=================================================================================================================================================Installing: pcre-devel i686 7.8-6.el6 centos 318 kTransaction Summary=================================================================================================================================================Install 1 Package(s)Total download size: 318 kInstalled size: 954 kIs this ok [y/N]: yDownloading Packages:Running rpm_check_debugRunning Transaction TestTransaction Test SucceededRunning TransactionWarning: RPMDB altered outside of yum. Installing : pcre-devel-7.8-6.el6.i686 1/1 Verifying : pcre-devel-7.8-6.el6.i686 1/1 Installed: pcre-devel.i686 0:7.8-6.el6 Complete![root@root Packages]# 查看 yum 包详情 yum info 【包名】 123456789101112131415161718[root@root yum.repos.d]# yum info httpdLoaded plugins: fastestmirror, refresh-packagekit, securityLoading mirror speeds from cached hostfileInstalled PackagesName : httpdArch : i686Version : 2.2.15Release : 29.el6.centosSize : 2.8 MRepo : installedFrom repo : anaconda-CentOS-201311271240.i386Summary : Apache HTTP ServerURL : http://httpd.apache.org/License : ASL 2.0Description : The Apache HTTP Server is a powerful, efficient, and extensible : web server.[root@root yum.repos.d]# yum 包删除 yum -y remove 【包名】 123456789101112131415161718192021222324252627282930313233343536373839404142434445[root@root yum.repos.d]# yum -y remove httpdLoaded plugins: fastestmirror, refresh-packagekit, securitySetting up Remove ProcessResolving Dependencies--&gt; Running transaction check---&gt; Package httpd.i686 0:2.2.15-29.el6.centos will be erased--&gt; Processing Dependency: httpd &gt;= 2.2.0 for package: gnome-user-share-2.28.2-3.el6.i686--&gt; Running transaction check---&gt; Package gnome-user-share.i686 0:2.28.2-3.el6 will be erased--&gt; Finished Dependency ResolutionDependencies Resolved================================================================================================================================================= Package Arch Version Repository Size=================================================================================================================================================Removing: httpd i686 2.2.15-29.el6.centos @anaconda-CentOS-201311271240.i386/6.5 2.8 MRemoving for dependencies: gnome-user-share i686 2.28.2-3.el6 @anaconda-CentOS-201311271240.i386/6.5 1.1 MTransaction Summary=================================================================================================================================================Remove 2 Package(s)Installed size: 3.9 MDownloading Packages:Running rpm_check_debugRunning Transaction TestTransaction Test SucceededRunning Transaction Erasing : gnome-user-share-2.28.2-3.el6.i686 1/2 Erasing : httpd-2.2.15-29.el6.centos.i686 2/2 warning: /etc/httpd/conf/httpd.conf saved as /etc/httpd/conf/httpd.conf.rpmsave Verifying : gnome-user-share-2.28.2-3.el6.i686 1/2 Verifying : httpd-2.2.15-29.el6.centos.i686 2/2 Removed: httpd.i686 0:2.2.15-29.el6.centos Dependency Removed: gnome-user-share.i686 0:2.28.2-3.el6 Complete![root@root yum.repos.d]# yum 包升级 yum update 【包名】","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://fanhuiren888.github.io/tags/Linux/"}]},{"title":"Linux_Centos6_新增硬盘分区，格式化,加载","slug":"Linux-Centos6-新增硬盘分区,格式化-加载","date":"2018-04-17T03:13:51.000Z","updated":"2018-04-17T03:22:20.786Z","comments":true,"path":"2018/04/17/Linux-Centos6-新增硬盘分区,格式化-加载/","link":"","permalink":"https://fanhuiren888.github.io/2018/04/17/Linux-Centos6-新增硬盘分区,格式化-加载/","excerpt":"","text":"此次操作是在VM虚拟机环境中进行： 首先需要添加一块硬盘–&gt;点击编辑虚拟机设置–&gt;点击弹框下面的添加–&gt;选择硬盘–&gt;点击下一步 选择SCSI类型–&gt;点击下一步 默认–&gt;下一步 选择下面的多文件–&gt;下一步 点击完成–&gt;确定–&gt;左边的虚拟机就会多一块20G的硬盘 然后虚拟机开机，在进行分区操作之前先简单介绍下磁盘分区工具fdisk，有几个常用的命令，例： fdisk + 新增磁盘：对指定的硬盘进行分区操作 fdisk -l :显示指定硬盘分区表信息 fdisk -d:删除一个硬盘分区 fdisk -n:创建一个分区 fdisk -p：列出硬盘分区表 fdisk -q：退出fdisk，不保存更改 fdisk -w:把设置写入硬盘分区表，然后退出。 介绍完命令我们开始操作，首先查看一下我们现在的分区情况 1234567891011121314151617181920212223242526272829303132[root@root ~]# df -hFilesystem Size Used Avail Use% Mounted on/dev/sda6 17G 3.2G 13G 20% /tmpfs 503M 72K 503M 1% /dev/shm/dev/sda1 504M 39M 440M 9% /boot/dev/sda2 5.8G 140M 5.4G 3% /home/dev/sda3 4.9G 222M 4.4G 5% /var[root@root ~]# fdisk -lDisk /dev/sda: 32.2 GB, 32212254720 bytes #第一块硬盘30G255 heads, 63 sectors/track, 3916 cylindersUnits = cylinders of 16065 * 512 = 8225280 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk identifier: 0x0007c967 #具体的分区情况 Device Boot Start End Blocks Id System/dev/sda1 * 1 66 524288 83 LinuxPartition 1 does not end on cylinder boundary./dev/sda2 66 831 6144000 83 LinuxPartition 2 does not end on cylinder boundary./dev/sda3 831 1468 5120000 83 Linux/dev/sda4 1468 3917 19667968 5 Extended/dev/sda5 1468 1723 2048000 82 Linux swap / Solaris/dev/sda6 1723 3917 17617920 83 LinuxDisk /dev/sdb: 21.5 GB, 21474836480 bytes #这是新增的20G硬盘255 heads, 63 sectors/track, 2610 cylindersUnits = cylinders of 16065 * 512 = 8225280 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk identifier: 0x00000000 现在进行分区，我这次练习分为1个主分区，4个逻辑分区，主分区大小为8G，逻辑分区大小分别为2G、3G、3G、2G 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112[root@root ~]# fdisk /dev/sdb #执行分区命令Device contains neither a valid DOS partition table, nor Sun, SGI or OSF disklabelBuilding a new DOS disklabel with disk identifier 0x543c4b70.Changes will remain in memory only, until you decide to write them.After that, of course, the previous content won&apos;t be recoverable.Warning: invalid flag 0x0000 of partition table 4 will be corrected by w(rite)WARNING: DOS-compatible mode is deprecated. It&apos;s strongly recommended to switch off the mode (command &apos;c&apos;) and change display units to sectors (command &apos;u&apos;).Command (m for help): n #N 新建分区Command action e extended p primary partition (1-4)p #P 主分区 E 扩展分区Partition number (1-4): 1 #分区号 输入1First cylinder (1-2610, default 1): #默认Using default value 1Last cylinder, +cylinders or +size&#123;K,M,G&#125; (1-2610, default 2610): +8G #sdb1 分8GCommand (m for help): w # W 保存The partition table has been altered!Calling ioctl() to re-read partition table.Syncing disks.[root@root ~]# fdisk -l # 我这里分完主分区先看看，毕竟操作不熟想保险一点，你们也可以做完主分区继续往下操作Disk /dev/sda: 32.2 GB, 32212254720 bytes255 heads, 63 sectors/track, 3916 cylindersUnits = cylinders of 16065 * 512 = 8225280 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk identifier: 0x0007c967 Device Boot Start End Blocks Id System/dev/sda1 * 1 66 524288 83 LinuxPartition 1 does not end on cylinder boundary./dev/sda2 66 831 6144000 83 LinuxPartition 2 does not end on cylinder boundary./dev/sda3 831 1468 5120000 83 Linux/dev/sda4 1468 3917 19667968 5 Extended/dev/sda5 1468 1723 2048000 82 Linux swap / Solaris/dev/sda6 1723 3917 17617920 83 LinuxDisk /dev/sdb: 21.5 GB, 21474836480 bytes255 heads, 63 sectors/track, 2610 cylindersUnits = cylinders of 16065 * 512 = 8225280 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk identifier: 0x543c4b70 Device Boot Start End Blocks Id System/dev/sdb1 1 1045 8393931 83 Linux[root@root ~]# fdisk /dev/sdb #继续操作，下面进行扩展分区WARNING: DOS-compatible mode is deprecated. It&apos;s strongly recommended to switch off the mode (command &apos;c&apos;) and change display units to sectors (command &apos;u&apos;).Command (m for help): n #新建Command action e extended p primary partition (1-4)e #扩展分区Partition number (1-4): 2 #分区号 2 First cylinder (1046-2610, default 1046): Using default value 1046Last cylinder, +cylinders or +size&#123;K,M,G&#125; (1046-2610, default 2610): #这里扩展分区的容量什么都不写，默认所有Using default value 2610Command (m for help): n #新建Command action l logical (5 or over) p primary partition (1-4)l #L 逻辑分区First cylinder (1046-2610, default 1046): Using default value 1046Last cylinder, +cylinders or +size&#123;K,M,G&#125; (1046-2610, default 2610): +2G #2GCommand (m for help): n #新建Command action l logical (5 or over) p primary partition (1-4)l #L 逻辑分区First cylinder (1308-2610, default 1308): Using default value 1308Last cylinder, +cylinders or +size&#123;K,M,G&#125; (1308-2610, default 2610): +3G #3GCommand (m for help): n #新建Command action l logical (5 or over) p primary partition (1-4)l #L 逻辑分区First cylinder (1701-2610, default 1701): Using default value 1701Last cylinder, +cylinders or +size&#123;K,M,G&#125; (1701-2610, default 2610): +3G #3GCommand (m for help): n #新建Command action l logical (5 or over) p primary partition (1-4)l #L 逻辑分区First cylinder (2094-2610, default 2094): Using default value 2094Last cylinder, +cylinders or +size&#123;K,M,G&#125; (2094-2610, default 2610): +2G #2G Command (m for help): w #W 保存The partition table has been altered!Calling ioctl() to re-read partition table.Syncing disks. 到这里所有分区就完了，再看一眼分区 123456789101112131415161718192021222324252627282930313233[root@root ~]# fdisk -lDisk /dev/sda: 32.2 GB, 32212254720 bytes255 heads, 63 sectors/track, 3916 cylindersUnits = cylinders of 16065 * 512 = 8225280 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk identifier: 0x0007c967 Device Boot Start End Blocks Id System/dev/sda1 * 1 66 524288 83 LinuxPartition 1 does not end on cylinder boundary./dev/sda2 66 831 6144000 83 LinuxPartition 2 does not end on cylinder boundary./dev/sda3 831 1468 5120000 83 Linux/dev/sda4 1468 3917 19667968 5 Extended/dev/sda5 1468 1723 2048000 82 Linux swap / Solaris/dev/sda6 1723 3917 17617920 83 LinuxDisk /dev/sdb: 21.5 GB, 21474836480 bytes255 heads, 63 sectors/track, 2610 cylindersUnits = cylinders of 16065 * 512 = 8225280 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk identifier: 0x543c4b70 Device Boot Start End Blocks Id System/dev/sdb1 1 1045 8393931 83 Linux/dev/sdb2 1046 2610 12570862+ 5 Extended/dev/sdb5 1046 1307 2104483+ 83 Linux/dev/sdb6 1308 1700 3156741 83 Linux/dev/sdb7 1701 2093 3156741 83 Linux/dev/sdb8 2094 2355 2104483+ 83 Linux 下面进行格式化操作 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124[root@root ~]# mkfs.ext4 /dev/sdb1 #以EXT4分区格式 格式化sdb1 mke2fs 1.41.12 (17-May-2010)文件系统标签=操作系统:Linux块大小=4096 (log=2)分块大小=4096 (log=2)Stride=0 blocks, Stripe width=0 blocks525200 inodes, 2098482 blocks104924 blocks (5.00%) reserved for the super user第一个数据块=0Maximum filesystem blocks=215167795265 block groups32768 blocks per group, 32768 fragments per group8080 inodes per groupSuperblock backups stored on blocks: 32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632正在写入inode表: 完成 Creating journal (32768 blocks): 完成Writing superblocks and filesystem accounting information: 完成This filesystem will be automatically checked every 37 mounts or180 days, whichever comes first. Use tune2fs -c or -i to override.[root@root ~]# mkfs.ext4 /dev/sdb2mke2fs 1.41.12 (17-May-2010)mkfs.ext4: inode_size (128) * inodes_count (0) too big for a filesystem with 0 blocks, specify higher inode_ratio (-i) or lower inode count (-N).[root@root ~]# mkfs.ext4 /dev/sdb5 #以EXT4分区格式 格式化sdb5mke2fs 1.41.12 (17-May-2010)文件系统标签=操作系统:Linux块大小=4096 (log=2)分块大小=4096 (log=2)Stride=0 blocks, Stripe width=0 blocks131648 inodes, 526120 blocks26306 blocks (5.00%) reserved for the super user第一个数据块=0Maximum filesystem blocks=54106521617 block groups32768 blocks per group, 32768 fragments per group7744 inodes per groupSuperblock backups stored on blocks: 32768, 98304, 163840, 229376, 294912正在写入inode表: 完成 Creating journal (16384 blocks): 完成Writing superblocks and filesystem accounting information: 完成This filesystem will be automatically checked every 39 mounts or180 days, whichever comes first. Use tune2fs -c or -i to override.[root@root ~]# mkfs.ext4 /dev/sdb6 #以EXT4分区格式 格式化sdb6mke2fs 1.41.12 (17-May-2010)文件系统标签=操作系统:Linux块大小=4096 (log=2)分块大小=4096 (log=2)Stride=0 blocks, Stripe width=0 blocks197600 inodes, 789185 blocks39459 blocks (5.00%) reserved for the super user第一个数据块=0Maximum filesystem blocks=80950067225 block groups32768 blocks per group, 32768 fragments per group7904 inodes per groupSuperblock backups stored on blocks: 32768, 98304, 163840, 229376, 294912正在写入inode表: 完成 Creating journal (16384 blocks): 完成Writing superblocks and filesystem accounting information: 完成This filesystem will be automatically checked every 23 mounts or180 days, whichever comes first. Use tune2fs -c or -i to override.[root@root ~]# mkfs.ext4 /dev/sdb7 #以EXT4分区格式 格式化sdb7mke2fs 1.41.12 (17-May-2010)文件系统标签=操作系统:Linux块大小=4096 (log=2)分块大小=4096 (log=2)Stride=0 blocks, Stripe width=0 blocks197600 inodes, 789185 blocks39459 blocks (5.00%) reserved for the super user第一个数据块=0Maximum filesystem blocks=80950067225 block groups32768 blocks per group, 32768 fragments per group7904 inodes per groupSuperblock backups stored on blocks: 32768, 98304, 163840, 229376, 294912正在写入inode表: 完成 Creating journal (16384 blocks): 完成Writing superblocks and filesystem accounting information: 完成This filesystem will be automatically checked every 34 mounts or180 days, whichever comes first. Use tune2fs -c or -i to override.[root@root ~]# mkfs.ext4 /dev/sdb8 #以EXT4分区格式 格式化sdb8mke2fs 1.41.12 (17-May-2010)文件系统标签=操作系统:Linux块大小=4096 (log=2)分块大小=4096 (log=2)Stride=0 blocks, Stripe width=0 blocks131648 inodes, 526120 blocks26306 blocks (5.00%) reserved for the super user第一个数据块=0Maximum filesystem blocks=54106521617 block groups32768 blocks per group, 32768 fragments per group7744 inodes per groupSuperblock backups stored on blocks: 32768, 98304, 163840, 229376, 294912正在写入inode表: 完成 Creating journal (16384 blocks): 完成Writing superblocks and filesystem accounting information: 完成This filesystem will be automatically checked every 38 mounts or180 days, whichever comes first. Use tune2fs -c or -i to override. 下面进行挂载操作，先创建挂载点，再挂载 123456[root@root ~]# mkdir /tmp/sdb&#123;1,5,6,7,8&#125; #创建5个区的挂载点；分别挂载[root@root ~]# mount /dev/sdb1 /tmp/sdb1 [root@root ~]# mount /dev/sdb5 /tmp/sdb5[root@root ~]# mount /dev/sdb6 /tmp/sdb6[root@root ~]# mount /dev/sdb7 /tmp/sdb7[root@root ~]# mount /dev/sdb8 /tmp/sdb8 再次查看分区 123456789101112131415161718192021222324252627282930313233343536373839404142434445[root@root ~]# fdisk -lDisk /dev/sda: 32.2 GB, 32212254720 bytes255 heads, 63 sectors/track, 3916 cylindersUnits = cylinders of 16065 * 512 = 8225280 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk identifier: 0x0007c967 Device Boot Start End Blocks Id System/dev/sda1 * 1 66 524288 83 LinuxPartition 1 does not end on cylinder boundary./dev/sda2 66 831 6144000 83 LinuxPartition 2 does not end on cylinder boundary./dev/sda3 831 1468 5120000 83 Linux/dev/sda4 1468 3917 19667968 5 Extended/dev/sda5 1468 1723 2048000 82 Linux swap / Solaris/dev/sda6 1723 3917 17617920 83 LinuxDisk /dev/sdb: 21.5 GB, 21474836480 bytes255 heads, 63 sectors/track, 2610 cylindersUnits = cylinders of 16065 * 512 = 8225280 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk identifier: 0x543c4b70 Device Boot Start End Blocks Id System/dev/sdb1 1 1045 8393931 83 Linux/dev/sdb2 1046 2610 12570862+ 5 Extended/dev/sdb5 1046 1307 2104483+ 83 Linux/dev/sdb6 1308 1700 3156741 83 Linux/dev/sdb7 1701 2093 3156741 83 Linux/dev/sdb8 2094 2355 2104483+ 83 Linux[root@root ~]# df -hFilesystem Size Used Avail Use% Mounted on/dev/sda6 17G 3.2G 13G 20% /tmpfs 503M 72K 503M 1% /dev/shm/dev/sda1 504M 39M 440M 9% /boot/dev/sda2 5.8G 140M 5.4G 3% /home/dev/sda3 4.9G 222M 4.4G 5% /var/dev/sdb1 7.9G 147M 7.4G 2% /tmp/sdb1/dev/sdb5 2.0G 68M 1.9G 4% /tmp/sdb5/dev/sdb6 3.0G 69M 2.8G 3% /tmp/sdb6/dev/sdb7 3.0G 69M 2.8G 3% /tmp/sdb7/dev/sdb8 2.0G 68M 1.9G 4% /tmp/sdb8","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://fanhuiren888.github.io/tags/Linux/"}]},{"title":"Git + Hexo 博客搭建","slug":"Git-Hexo-博客搭建","date":"2018-02-27T01:53:22.000Z","updated":"2018-04-10T12:47:39.376Z","comments":true,"path":"2018/02/27/Git-Hexo-博客搭建/","link":"","permalink":"https://fanhuiren888.github.io/2018/02/27/Git-Hexo-博客搭建/","excerpt":"","text":"1.注册github 2.安装git 3.安装node.js 4.打开git bash 安装 hexo 123456789$ npm install -g hexo$ cd D:/Hexo$ hexo init$ hexo g$ hexo s 然后到浏览器输入 localhost:4000 就可以看到效果了。","categories":[],"tags":[{"name":"git","slug":"git","permalink":"https://fanhuiren888.github.io/tags/git/"}]}]}